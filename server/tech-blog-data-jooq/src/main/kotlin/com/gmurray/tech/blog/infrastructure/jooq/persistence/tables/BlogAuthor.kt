/*
 * This file is generated by jOOQ.
 */
package com.gmurray.tech.blog.infrastructure.jooq.persistence.tables


import com.gmurray.tech.blog.infrastructure.jooq.persistence.TechBlog
import com.gmurray.tech.blog.infrastructure.jooq.persistence.keys.EMAIL2_UNIQUE
import com.gmurray.tech.blog.infrastructure.jooq.persistence.keys.PK_BLOG_AUTHOR
import com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.records.BlogAuthorRecord

import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BlogAuthor(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BlogAuthorRecord>?,
    aliased: Table<BlogAuthorRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BlogAuthorRecord>(
    alias,
    TechBlog.TECH_BLOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tech_blog.blog_author</code>
         */
        val BLOG_AUTHOR: BlogAuthor = BlogAuthor()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BlogAuthorRecord> = BlogAuthorRecord::class.java

    /**
     * The column <code>tech_blog.blog_author.id</code>.
     */
    val ID: TableField<BlogAuthorRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>tech_blog.blog_author.first_name</code>.
     */
    val FIRST_NAME: TableField<BlogAuthorRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>tech_blog.blog_author.last_name</code>.
     */
    val LAST_NAME: TableField<BlogAuthorRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>tech_blog.blog_author.row_version</code>.
     */
    val ROW_VERSION: TableField<BlogAuthorRecord, Int?> = createField(DSL.name("row_version"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>tech_blog.blog_author.row_created_by</code>.
     */
    val ROW_CREATED_BY: TableField<BlogAuthorRecord, String?> = createField(DSL.name("row_created_by"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>tech_blog.blog_author.row_created_on</code>.
     */
    val ROW_CREATED_ON: TableField<BlogAuthorRecord, LocalDateTime?> = createField(DSL.name("row_created_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tech_blog.blog_author.row_updated_by</code>.
     */
    val ROW_UPDATED_BY: TableField<BlogAuthorRecord, String?> = createField(DSL.name("row_updated_by"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tech_blog.blog_author.row_updated_on</code>.
     */
    val ROW_UPDATED_ON: TableField<BlogAuthorRecord, LocalDateTime?> = createField(DSL.name("row_updated_on"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tech_blog.blog_author.email</code>.
     */
    val EMAIL: TableField<BlogAuthorRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(300).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BlogAuthorRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BlogAuthorRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tech_blog.blog_author</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tech_blog.blog_author</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tech_blog.blog_author</code> table reference
     */
    constructor(): this(DSL.name("blog_author"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BlogAuthorRecord>): this(Internal.createPathAlias(child, key), child, key, BLOG_AUTHOR, null)
    override fun getSchema(): Schema? = if (aliased()) null else TechBlog.TECH_BLOG
    override fun getIdentity(): Identity<BlogAuthorRecord, Long?> = super.getIdentity() as Identity<BlogAuthorRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<BlogAuthorRecord> = PK_BLOG_AUTHOR
    override fun getUniqueKeys(): List<UniqueKey<BlogAuthorRecord>> = listOf(EMAIL2_UNIQUE)
    override fun getRecordVersion(): TableField<BlogAuthorRecord, Int?> = ROW_VERSION
    override fun getRecordTimestamp(): TableField<BlogAuthorRecord, LocalDateTime?> = ROW_CREATED_ON
    override fun `as`(alias: String): BlogAuthor = BlogAuthor(DSL.name(alias), this)
    override fun `as`(alias: Name): BlogAuthor = BlogAuthor(alias, this)
    override fun `as`(alias: Table<*>): BlogAuthor = BlogAuthor(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BlogAuthor = BlogAuthor(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BlogAuthor = BlogAuthor(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BlogAuthor = BlogAuthor(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<Long?, String?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?, String?> = super.fieldsRow() as Row9<Long?, String?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
