/*
 * This file is generated by jOOQ.
 */
package com.gmurray.tech.blog.infrastructure.jooq.persistence.tables


import com.gmurray.tech.blog.infrastructure.jooq.persistence.TechBlog
import com.gmurray.tech.blog.infrastructure.jooq.persistence.keys.PK_POST_POST_CATEGORY
import com.gmurray.tech.blog.infrastructure.jooq.persistence.keys.POST_POST_CATEGORY__FK_POST_POST_CATEGORY_CATEGORY_ID
import com.gmurray.tech.blog.infrastructure.jooq.persistence.keys.POST_POST_CATEGORY__FK_POST_POST_CATEGORY_POST_ID
import com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.records.PostPostCategoryRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PostPostCategory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PostPostCategoryRecord>?,
    aliased: Table<PostPostCategoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PostPostCategoryRecord>(
    alias,
    TechBlog.TECH_BLOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tech_blog.post_post_category</code>
         */
        val POST_POST_CATEGORY: PostPostCategory = PostPostCategory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PostPostCategoryRecord> = PostPostCategoryRecord::class.java

    /**
     * The column <code>tech_blog.post_post_category.post_id</code>.
     */
    val POST_ID: TableField<PostPostCategoryRecord, Long?> = createField(DSL.name("post_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>tech_blog.post_post_category.category_id</code>.
     */
    val CATEGORY_ID: TableField<PostPostCategoryRecord, Long?> = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PostPostCategoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PostPostCategoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tech_blog.post_post_category</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tech_blog.post_post_category</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tech_blog.post_post_category</code> table reference
     */
    constructor(): this(DSL.name("post_post_category"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PostPostCategoryRecord>): this(Internal.createPathAlias(child, key), child, key, POST_POST_CATEGORY, null)
    override fun getSchema(): Schema? = if (aliased()) null else TechBlog.TECH_BLOG
    override fun getPrimaryKey(): UniqueKey<PostPostCategoryRecord> = PK_POST_POST_CATEGORY
    override fun getReferences(): List<ForeignKey<PostPostCategoryRecord, *>> = listOf(POST_POST_CATEGORY__FK_POST_POST_CATEGORY_POST_ID, POST_POST_CATEGORY__FK_POST_POST_CATEGORY_CATEGORY_ID)

    private lateinit var _blogPost: BlogPost
    private lateinit var _postCategory: PostCategory

    /**
     * Get the implicit join path to the <code>tech_blog.blog_post</code> table.
     */
    fun blogPost(): BlogPost {
        if (!this::_blogPost.isInitialized)
            _blogPost = BlogPost(this, POST_POST_CATEGORY__FK_POST_POST_CATEGORY_POST_ID)

        return _blogPost;
    }

    val blogPost: BlogPost
        get(): BlogPost = blogPost()

    /**
     * Get the implicit join path to the <code>tech_blog.post_category</code>
     * table.
     */
    fun postCategory(): PostCategory {
        if (!this::_postCategory.isInitialized)
            _postCategory = PostCategory(this, POST_POST_CATEGORY__FK_POST_POST_CATEGORY_CATEGORY_ID)

        return _postCategory;
    }

    val postCategory: PostCategory
        get(): PostCategory = postCategory()
    override fun `as`(alias: String): PostPostCategory = PostPostCategory(DSL.name(alias), this)
    override fun `as`(alias: Name): PostPostCategory = PostPostCategory(alias, this)
    override fun `as`(alias: Table<*>): PostPostCategory = PostPostCategory(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PostPostCategory = PostPostCategory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PostPostCategory = PostPostCategory(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PostPostCategory = PostPostCategory(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Long?, Long?> = super.fieldsRow() as Row2<Long?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
