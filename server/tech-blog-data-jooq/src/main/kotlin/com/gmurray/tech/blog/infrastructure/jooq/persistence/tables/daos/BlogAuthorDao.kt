/*
 * This file is generated by jOOQ.
 */
package com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.daos


import com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.BlogAuthor
import com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.records.BlogAuthorRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class BlogAuthorDao(configuration: Configuration?) : DAOImpl<BlogAuthorRecord, com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor, Long>(BlogAuthor.BLOG_AUTHOR, com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor::class.java, configuration) {

    /**
     * Create a new BlogAuthorDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetchRange(BlogAuthor.BLOG_AUTHOR.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetch(BlogAuthor.BLOG_AUTHOR.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor? = fetchOne(BlogAuthor.BLOG_AUTHOR.ID, value)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstName(lowerInclusive: String?, upperInclusive: String?): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetchRange(BlogAuthor.BLOG_AUTHOR.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByFirstName(vararg values: String): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetch(BlogAuthor.BLOG_AUTHOR.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastName(lowerInclusive: String?, upperInclusive: String?): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetchRange(BlogAuthor.BLOG_AUTHOR.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByLastName(vararg values: String): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetch(BlogAuthor.BLOG_AUTHOR.LAST_NAME, *values)

    /**
     * Fetch records that have <code>row_version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRowVersion(lowerInclusive: Int?, upperInclusive: Int?): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetchRange(BlogAuthor.BLOG_AUTHOR.ROW_VERSION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>row_version IN (values)</code>
     */
    fun fetchByRowVersion(vararg values: Int): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetch(BlogAuthor.BLOG_AUTHOR.ROW_VERSION, *values.toTypedArray())

    /**
     * Fetch records that have <code>row_created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRowCreatedBy(lowerInclusive: String?, upperInclusive: String?): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetchRange(BlogAuthor.BLOG_AUTHOR.ROW_CREATED_BY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>row_created_by IN (values)</code>
     */
    fun fetchByRowCreatedBy(vararg values: String): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetch(BlogAuthor.BLOG_AUTHOR.ROW_CREATED_BY, *values)

    /**
     * Fetch records that have <code>row_created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRowCreatedOn(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetchRange(BlogAuthor.BLOG_AUTHOR.ROW_CREATED_ON, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>row_created_on IN (values)</code>
     */
    fun fetchByRowCreatedOn(vararg values: LocalDateTime): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetch(BlogAuthor.BLOG_AUTHOR.ROW_CREATED_ON, *values)

    /**
     * Fetch records that have <code>row_updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRowUpdatedBy(lowerInclusive: String?, upperInclusive: String?): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetchRange(BlogAuthor.BLOG_AUTHOR.ROW_UPDATED_BY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>row_updated_by IN (values)</code>
     */
    fun fetchByRowUpdatedBy(vararg values: String): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetch(BlogAuthor.BLOG_AUTHOR.ROW_UPDATED_BY, *values)

    /**
     * Fetch records that have <code>row_updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRowUpdatedOn(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetchRange(BlogAuthor.BLOG_AUTHOR.ROW_UPDATED_ON, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>row_updated_on IN (values)</code>
     */
    fun fetchByRowUpdatedOn(vararg values: LocalDateTime): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetch(BlogAuthor.BLOG_AUTHOR.ROW_UPDATED_ON, *values)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String?, upperInclusive: String?): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetchRange(BlogAuthor.BLOG_AUTHOR.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor> = fetch(BlogAuthor.BLOG_AUTHOR.EMAIL, *values)

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    fun fetchOneByEmail(value: String): com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogAuthor? = fetchOne(BlogAuthor.BLOG_AUTHOR.EMAIL, value)
}
