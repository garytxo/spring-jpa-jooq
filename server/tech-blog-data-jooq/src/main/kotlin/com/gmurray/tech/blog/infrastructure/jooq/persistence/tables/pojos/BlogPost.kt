/*
 * This file is generated by jOOQ.
 */
package com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos


import com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.interfaces.IBlogPost
import com.gmurray.tech.blog.infrastructure.persistence.shared.BlogPostStatus

import java.time.LocalDateTime


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
data class BlogPost(
    override var id: Long? = null,
    override var authorId: Long? = null,
    override var title: String? = null,
    override var description: String? = null,
    override var status: BlogPostStatus? = null,
    override var rowVersion: Int? = null,
    override var rowCreatedBy: String? = null,
    override var rowCreatedOn: LocalDateTime? = null,
    override var rowUpdatedBy: String? = null,
    override var rowUpdatedOn: LocalDateTime? = null
): IBlogPost {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: BlogPost = other as BlogPost
        if (this.id == null) {
            if (o.id != null)
                return false
        }
        else if (this.id != o.id)
            return false
        if (this.authorId == null) {
            if (o.authorId != null)
                return false
        }
        else if (this.authorId != o.authorId)
            return false
        if (this.title == null) {
            if (o.title != null)
                return false
        }
        else if (this.title != o.title)
            return false
        if (this.description == null) {
            if (o.description != null)
                return false
        }
        else if (this.description != o.description)
            return false
        if (this.status == null) {
            if (o.status != null)
                return false
        }
        else if (this.status != o.status)
            return false
        if (this.rowVersion == null) {
            if (o.rowVersion != null)
                return false
        }
        else if (this.rowVersion != o.rowVersion)
            return false
        if (this.rowCreatedBy == null) {
            if (o.rowCreatedBy != null)
                return false
        }
        else if (this.rowCreatedBy != o.rowCreatedBy)
            return false
        if (this.rowCreatedOn == null) {
            if (o.rowCreatedOn != null)
                return false
        }
        else if (this.rowCreatedOn != o.rowCreatedOn)
            return false
        if (this.rowUpdatedBy == null) {
            if (o.rowUpdatedBy != null)
                return false
        }
        else if (this.rowUpdatedBy != o.rowUpdatedBy)
            return false
        if (this.rowUpdatedOn == null) {
            if (o.rowUpdatedOn != null)
                return false
        }
        else if (this.rowUpdatedOn != o.rowUpdatedOn)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.id == null) 0 else this.id.hashCode())
        result = prime * result + (if (this.authorId == null) 0 else this.authorId.hashCode())
        result = prime * result + (if (this.title == null) 0 else this.title.hashCode())
        result = prime * result + (if (this.description == null) 0 else this.description.hashCode())
        result = prime * result + (if (this.status == null) 0 else this.status.hashCode())
        result = prime * result + (if (this.rowVersion == null) 0 else this.rowVersion.hashCode())
        result = prime * result + (if (this.rowCreatedBy == null) 0 else this.rowCreatedBy.hashCode())
        result = prime * result + (if (this.rowCreatedOn == null) 0 else this.rowCreatedOn.hashCode())
        result = prime * result + (if (this.rowUpdatedBy == null) 0 else this.rowUpdatedBy.hashCode())
        result = prime * result + (if (this.rowUpdatedOn == null) 0 else this.rowUpdatedOn.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("BlogPost (")

        sb.append(id)
        sb.append(", ").append(authorId)
        sb.append(", ").append(title)
        sb.append(", ").append(description)
        sb.append(", ").append(status)
        sb.append(", ").append(rowVersion)
        sb.append(", ").append(rowCreatedBy)
        sb.append(", ").append(rowCreatedOn)
        sb.append(", ").append(rowUpdatedBy)
        sb.append(", ").append(rowUpdatedOn)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IBlogPost) {
        id = from.id
        authorId = from.authorId
        title = from.title
        description = from.description
        status = from.status
        rowVersion = from.rowVersion
        rowCreatedBy = from.rowCreatedBy
        rowCreatedOn = from.rowCreatedOn
        rowUpdatedBy = from.rowUpdatedBy
        rowUpdatedOn = from.rowUpdatedOn
    }

    override fun <E : IBlogPost> into(into: E): E {
        into.from(this)
        return into
    }
}
