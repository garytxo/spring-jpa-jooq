/*
 * This file is generated by jOOQ.
 */
package com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.records


import com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.BlogPost
import com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.interfaces.IBlogPost
import com.gmurray.tech.blog.infrastructure.persistence.jooq.codegen.TechBlogAuditableAwareRecord
import com.gmurray.tech.blog.infrastructure.persistence.shared.BlogPostStatus

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BlogPostRecord() : UpdatableRecordImpl<BlogPostRecord>(BlogPost.BLOG_POST), TechBlogAuditableAwareRecord, Record10<Long?, Long?, String?, String?, BlogPostStatus?, Int?, String?, LocalDateTime?, String?, LocalDateTime?>, IBlogPost {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var authorId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open override var title: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open override var description: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open override var status: BlogPostStatus?
        set(value): Unit = set(4, value)
        get(): BlogPostStatus? = get(4) as BlogPostStatus?

    open override var rowVersion: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open override var rowCreatedBy: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open override var rowCreatedOn: LocalDateTime?
        set(value): Unit = set(7, value)
        get(): LocalDateTime? = get(7) as LocalDateTime?

    open override var rowUpdatedBy: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open override var rowUpdatedOn: LocalDateTime?
        set(value): Unit = set(9, value)
        get(): LocalDateTime? = get(9) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<Long?, Long?, String?, String?, BlogPostStatus?, Int?, String?, LocalDateTime?, String?, LocalDateTime?> = super.fieldsRow() as Row10<Long?, Long?, String?, String?, BlogPostStatus?, Int?, String?, LocalDateTime?, String?, LocalDateTime?>
    override fun valuesRow(): Row10<Long?, Long?, String?, String?, BlogPostStatus?, Int?, String?, LocalDateTime?, String?, LocalDateTime?> = super.valuesRow() as Row10<Long?, Long?, String?, String?, BlogPostStatus?, Int?, String?, LocalDateTime?, String?, LocalDateTime?>
    override fun field1(): Field<Long?> = BlogPost.BLOG_POST.ID
    override fun field2(): Field<Long?> = BlogPost.BLOG_POST.AUTHOR_ID
    override fun field3(): Field<String?> = BlogPost.BLOG_POST.TITLE
    override fun field4(): Field<String?> = BlogPost.BLOG_POST.DESCRIPTION
    override fun field5(): Field<BlogPostStatus?> = BlogPost.BLOG_POST.STATUS
    override fun field6(): Field<Int?> = BlogPost.BLOG_POST.ROW_VERSION
    override fun field7(): Field<String?> = BlogPost.BLOG_POST.ROW_CREATED_BY
    override fun field8(): Field<LocalDateTime?> = BlogPost.BLOG_POST.ROW_CREATED_ON
    override fun field9(): Field<String?> = BlogPost.BLOG_POST.ROW_UPDATED_BY
    override fun field10(): Field<LocalDateTime?> = BlogPost.BLOG_POST.ROW_UPDATED_ON
    override fun component1(): Long? = id
    override fun component2(): Long? = authorId
    override fun component3(): String? = title
    override fun component4(): String? = description
    override fun component5(): BlogPostStatus? = status
    override fun component6(): Int? = rowVersion
    override fun component7(): String? = rowCreatedBy
    override fun component8(): LocalDateTime? = rowCreatedOn
    override fun component9(): String? = rowUpdatedBy
    override fun component10(): LocalDateTime? = rowUpdatedOn
    override fun value1(): Long? = id
    override fun value2(): Long? = authorId
    override fun value3(): String? = title
    override fun value4(): String? = description
    override fun value5(): BlogPostStatus? = status
    override fun value6(): Int? = rowVersion
    override fun value7(): String? = rowCreatedBy
    override fun value8(): LocalDateTime? = rowCreatedOn
    override fun value9(): String? = rowUpdatedBy
    override fun value10(): LocalDateTime? = rowUpdatedOn

    override fun value1(value: Long?): BlogPostRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): BlogPostRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): BlogPostRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): BlogPostRecord {
        set(3, value)
        return this
    }

    override fun value5(value: BlogPostStatus?): BlogPostRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): BlogPostRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): BlogPostRecord {
        set(6, value)
        return this
    }

    override fun value8(value: LocalDateTime?): BlogPostRecord {
        set(7, value)
        return this
    }

    override fun value9(value: String?): BlogPostRecord {
        set(8, value)
        return this
    }

    override fun value10(value: LocalDateTime?): BlogPostRecord {
        set(9, value)
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: String?, value4: String?, value5: BlogPostStatus?, value6: Int?, value7: String?, value8: LocalDateTime?, value9: String?, value10: LocalDateTime?): BlogPostRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IBlogPost) {
        id = from.id
        authorId = from.authorId
        title = from.title
        description = from.description
        status = from.status
        rowVersion = from.rowVersion
        rowCreatedBy = from.rowCreatedBy
        rowCreatedOn = from.rowCreatedOn
        rowUpdatedBy = from.rowUpdatedBy
        rowUpdatedOn = from.rowUpdatedOn
        resetChangedOnNotNull()
    }

    override fun <E : IBlogPost> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised BlogPostRecord
     */
    constructor(id: Long? = null, authorId: Long? = null, title: String? = null, description: String? = null, status: BlogPostStatus? = null, rowVersion: Int? = null, rowCreatedBy: String? = null, rowCreatedOn: LocalDateTime? = null, rowUpdatedBy: String? = null, rowUpdatedOn: LocalDateTime? = null): this() {
        this.id = id
        this.authorId = authorId
        this.title = title
        this.description = description
        this.status = status
        this.rowVersion = rowVersion
        this.rowCreatedBy = rowCreatedBy
        this.rowCreatedOn = rowCreatedOn
        this.rowUpdatedBy = rowUpdatedBy
        this.rowUpdatedOn = rowUpdatedOn
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BlogPostRecord
     */
    constructor(value: com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.BlogPost?): this() {
        if (value != null) {
            this.id = value.id
            this.authorId = value.authorId
            this.title = value.title
            this.description = value.description
            this.status = value.status
            this.rowVersion = value.rowVersion
            this.rowCreatedBy = value.rowCreatedBy
            this.rowCreatedOn = value.rowCreatedOn
            this.rowUpdatedBy = value.rowUpdatedBy
            this.rowUpdatedOn = value.rowUpdatedOn
            resetChangedOnNotNull()
        }
    }
}
