/*
 * This file is generated by jOOQ.
 */
package com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.records


import com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.PostCategory
import com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.interfaces.IPostCategory
import com.gmurray.tech.blog.infrastructure.persistence.jooq.codegen.TechBlogAuditableAwareRecord

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PostCategoryRecord() : UpdatableRecordImpl<PostCategoryRecord>(PostCategory.POST_CATEGORY), TechBlogAuditableAwareRecord, Record7<Long?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?>, IPostCategory {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open override var rowVersion: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open override var rowCreatedBy: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open override var rowCreatedOn: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open override var rowUpdatedBy: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open override var rowUpdatedOn: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Long?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?> = super.fieldsRow() as Row7<Long?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?>
    override fun valuesRow(): Row7<Long?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?> = super.valuesRow() as Row7<Long?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?>
    override fun field1(): Field<Long?> = PostCategory.POST_CATEGORY.ID
    override fun field2(): Field<String?> = PostCategory.POST_CATEGORY.NAME
    override fun field3(): Field<Int?> = PostCategory.POST_CATEGORY.ROW_VERSION
    override fun field4(): Field<String?> = PostCategory.POST_CATEGORY.ROW_CREATED_BY
    override fun field5(): Field<LocalDateTime?> = PostCategory.POST_CATEGORY.ROW_CREATED_ON
    override fun field6(): Field<String?> = PostCategory.POST_CATEGORY.ROW_UPDATED_BY
    override fun field7(): Field<LocalDateTime?> = PostCategory.POST_CATEGORY.ROW_UPDATED_ON
    override fun component1(): Long? = id
    override fun component2(): String? = name
    override fun component3(): Int? = rowVersion
    override fun component4(): String? = rowCreatedBy
    override fun component5(): LocalDateTime? = rowCreatedOn
    override fun component6(): String? = rowUpdatedBy
    override fun component7(): LocalDateTime? = rowUpdatedOn
    override fun value1(): Long? = id
    override fun value2(): String? = name
    override fun value3(): Int? = rowVersion
    override fun value4(): String? = rowCreatedBy
    override fun value5(): LocalDateTime? = rowCreatedOn
    override fun value6(): String? = rowUpdatedBy
    override fun value7(): LocalDateTime? = rowUpdatedOn

    override fun value1(value: Long?): PostCategoryRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): PostCategoryRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): PostCategoryRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): PostCategoryRecord {
        set(3, value)
        return this
    }

    override fun value5(value: LocalDateTime?): PostCategoryRecord {
        set(4, value)
        return this
    }

    override fun value6(value: String?): PostCategoryRecord {
        set(5, value)
        return this
    }

    override fun value7(value: LocalDateTime?): PostCategoryRecord {
        set(6, value)
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: Int?, value4: String?, value5: LocalDateTime?, value6: String?, value7: LocalDateTime?): PostCategoryRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IPostCategory) {
        id = from.id
        name = from.name
        rowVersion = from.rowVersion
        rowCreatedBy = from.rowCreatedBy
        rowCreatedOn = from.rowCreatedOn
        rowUpdatedBy = from.rowUpdatedBy
        rowUpdatedOn = from.rowUpdatedOn
        resetChangedOnNotNull()
    }

    override fun <E : IPostCategory> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised PostCategoryRecord
     */
    constructor(id: Long? = null, name: String? = null, rowVersion: Int? = null, rowCreatedBy: String? = null, rowCreatedOn: LocalDateTime? = null, rowUpdatedBy: String? = null, rowUpdatedOn: LocalDateTime? = null): this() {
        this.id = id
        this.name = name
        this.rowVersion = rowVersion
        this.rowCreatedBy = rowCreatedBy
        this.rowCreatedOn = rowCreatedOn
        this.rowUpdatedBy = rowUpdatedBy
        this.rowUpdatedOn = rowUpdatedOn
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised PostCategoryRecord
     */
    constructor(value: com.gmurray.tech.blog.infrastructure.jooq.persistence.tables.pojos.PostCategory?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.rowVersion = value.rowVersion
            this.rowCreatedBy = value.rowCreatedBy
            this.rowCreatedOn = value.rowCreatedOn
            this.rowUpdatedBy = value.rowUpdatedBy
            this.rowUpdatedOn = value.rowUpdatedOn
            resetChangedOnNotNull()
        }
    }
}
